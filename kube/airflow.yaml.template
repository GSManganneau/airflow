# The backing volume can be anything you want, it just needs to be `ReadWriteOnce`
# I'm using hostPath since minikube is nice for testing, but any (non-local) volume will work on a real cluster
kind: PersistentVolume
apiVersion: v1
metadata:
  name: airflow-dags
  labels:
    type: local
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/airflow-dags"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: airflow-dags
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: airflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: airflow
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
              "name": "init",
              "image": "{{docker_image}}",
              "command": ["bash", "-c", "cd /usr/local/lib/python2.7/dist-packages/airflow && airflow initdb && alembic upgrade head"],
              "env": [
                {"name": "AIRFLOW__CORE__K8S_IMAGE", "value": ""},
                {"name": "AIRFLOW__CORE__K8S_GIT_REPO", "value": ""},
                {"name": "AIRFLOW__CORE__K8S_GIT_BRANCH", "value": ""},
                {"name": "AIRFLOW__CORE__K8S_DAGS_VOLUME_CLAIM", "value": "airflow-dags"},
                {"name": "AIRFLOW__CORE__K8S_DAGS_VOLUME_SUBPATH", "value": "git"}
              ]
          }
      ]'
    spec:
#      initContainers:
#      - name: init
#        image: {{docker_image}}
#        command: [
#          "bash", "-c", "cd /usr/local/lib/python2.7/dist-packages/airflow && airflow initdb && alembic upgrade head"
#        ]
      containers:
      - name: web
        image: {{docker_image}}
        ports:
        - name: web
          containerPort: 8080
        args: ["webserver"]
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__CORE__K8S_IMAGE
          value: {{docker_image}}
        # set these two confs
        - name: AIRFLOW__CORE__K8S_GIT_REPO
          value: https://github.com/grantnicholas/testdags.git
        - name: AIRFLOW__CORE__K8S_GIT_BRANCH
          value: master
        # or set these two
        - name: AIRFLOW__CORE__K8S_DAGS_VOLUME_CLAIM
          value: airflow-dags
        - name: AIRFLOW__CORE__K8S_DAGS_VOLUME_SUBPATH
          value: git
        #
        volumeMounts:
        - name: airflow-dags
          mountPath: /root/airflow/dags
          subPath: git
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          httpGet:
            path: /admin
            port: 8080
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          httpGet:
            path: /admin
            port: 8080
      - name: scheduler
        image: {{docker_image}}
        args: ["scheduler"]
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        - name: AIRFLOW__CORE__K8S_IMAGE
          value: {{docker_image}}
        # set these two confs
        - name: AIRFLOW__CORE__K8S_GIT_REPO
          value: https://github.com/grantnicholas/testdags.git
        - name: AIRFLOW__CORE__K8S_GIT_BRANCH
          value: master
        # or these two
        - name: AIRFLOW__CORE__K8S_DAGS_VOLUME_CLAIM
          value: airflow-dags
        - name: AIRFLOW__CORE__K8S_DAGS_VOLUME_SUBPATH
          value: git
        #
        - name: AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL
          value: "60"
        volumeMounts:
        - name: airflow-dags
          mountPath: /root/airflow/dags
          subPath: git
      - name: sync
        image: gcr.io/google_containers/git-sync:v2.0.4
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: GIT_SYNC_REPO
          value: https://github.com/grantnicholas/testdags.git
        - name: GIT_SYNC_BRANCH
          value: master
        - name: GIT_SYNC_DEST
          value: git
        volumeMounts:
        - name: airflow-dags
          mountPath: /git
      volumes:
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags
---
apiVersion: v1
kind: Service
metadata:
  name: airflow
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30809
  selector:
    name: airflow

